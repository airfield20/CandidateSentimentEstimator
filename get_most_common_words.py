from TweetReader import TweetReader
import pandas as pd
import nltk
import emoji

def pos_or_neg(row):
    sum = 0
    if row["anger"]:
        sum = sum - 1
    if row["disgust"]:
        sum = sum - 1
    if row["fear"]:
        sum = sum - 1
    if row["joy"]:
        sum = sum + 1
    if row["love"]:
        sum = sum + 1
    if row["optimism"]:
        sum = sum + 1
    if row["pessimism"]:
        sum = sum - 1
    if row["sadness"]:
        sum = sum - 1
    if row["trust"]:
        sum = sum + 1
    return sum > 0

def get_pos_neg_labels(df):
    return df.apply(lambda row: pos_or_neg(row), axis=1)

def get_common_unigrams(df):
    pos_unigram_dict = {}
    neg_unigram_dict = {}
    exclude_chars = '#,.\'"`~(): \n*/\\'
    def get_unigrams(row):
        if(row['IS_POS']):
            grams = nltk.word_tokenize(row["TWEET"])
            for gram in grams:
                gram = emoji.demojize(gram.strip(exclude_chars).lower())
                if gram.isnumeric():
                    continue
                try:
                    pos_unigram_dict[gram] = pos_unigram_dict[gram] + 1
                except:
                    pos_unigram_dict[gram] = 1
        else:
            grams = nltk.word_tokenize(row["TWEET"])
            for gram in grams:
                gram = emoji.demojize(gram.strip(exclude_chars).lower())
                if gram.isnumeric():
                    continue
                try:
                    neg_unigram_dict[gram] = neg_unigram_dict[gram] + 1
                except:
                    neg_unigram_dict[gram] = 1

    df.apply(lambda row: get_unigrams(row),axis=1)

    pos_unigram_set = set(list(pos_unigram_dict.keys()))
    neg_unigram_set = set(list(neg_unigram_dict.keys()))
    tmp_neg_set = neg_unigram_set - pos_unigram_set
    pos_unigram_set = pos_unigram_set - neg_unigram_set
    neg_unigram_set = tmp_neg_set
    del tmp_neg_set

    final_unigram_dict ={}

    for key in neg_unigram_set:
        final_unigram_dict[key] = neg_unigram_dict[key]

    unigram_df = pd.DataFrame.from_dict(final_unigram_dict,orient='index')
    unigram_df.columns = ["OCCURENCES"]
    unigram_df.sort_values(by='OCCURENCES',inplace=True)
    unigram_df = unigram_df[unigram_df.OCCURENCES > 7]
    print(unigram_df.head())
    return unigram_df
    x=1

if __name__ == '__main__':
    reader = TweetReader()
    docs_df, label_df = reader.load_tweets('tweet_data/tweet_training.pickle')
    df = pd.DataFrame()
    df["TWEET"] = docs_df
    df["IS_POS"] = get_pos_neg_labels(label_df)
    common_words_df = get_common_unigrams(df)
    # labels = get_pos_neg_labels(label_df)
    common_words_df['WORD'] = common_words_df.index
    with open("dictionaries/dataset_negative_words",'w') as file:
        try:
            file.write(";Auto generated by Aaron based on SEMEVAL dataset;\n\n")
            common_words_df.apply(lambda row: file.write(row['WORD'] + "\n"),axis=1)
        except:
            print("error writing file")
