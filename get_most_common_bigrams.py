from TweetReader import TweetReader
import pandas as pd
import nltk
import emoji

def pos_or_neg(row):
    sum = 0
    if row["anger"]:
        sum = sum - 1
    if row["disgust"]:
        sum = sum - 1
    if row["fear"]:
        sum = sum - 1
    if row["joy"]:
        sum = sum + 1
    if row["love"]:
        sum = sum + 1
    if row["optimism"]:
        sum = sum + 1
    if row["pessimism"]:
        sum = sum - 1
    if row["sadness"]:
        sum = sum - 1
    if row["trust"]:
        sum = sum + 1
    return sum > 0

def get_pos_neg_labels(df):
    return df.apply(lambda row: pos_or_neg(row), axis=1)

def get_common_bigrams(df):
    pos_bigram_dict = {}
    neg_bigram_dict = {}
    exclude_chars = '#,.\'"`~(): \n*/\\^'

    def get_bigrams(row):
        if row['IS_POS']:
            tokens = nltk.word_tokenize(row["TWEET"])
            bigrams = list(nltk.bigrams(tokens))
            for index, bigram in enumerate(bigrams):
                w1 = emoji.demojize(bigram[0].strip(exclude_chars).lower())
                w2 = emoji.demojize(bigram[1].strip(exclude_chars).lower())
                if w1.isnumeric() and w2.isnumeric():
                    continue
                try:
                    pos_bigram_dict[w1 + ' ' + w2] = pos_bigram_dict[w1 + ' ' + w2] + 1
                except:
                    pos_bigram_dict[w1 + ' ' + w2] = 1
        else:
            tokens = nltk.word_tokenize(row["TWEET"])
            bigrams = list(nltk.bigrams(tokens))
            for index, bigram in enumerate(bigrams):
                w1 = emoji.demojize(bigram[0].strip(exclude_chars).lower())
                w2 = emoji.demojize(bigram[1].strip(exclude_chars).lower())
                if w1.isnumeric() and w2.isnumeric():
                    continue
                try:
                    neg_bigram_dict[w1 + ' ' + w2] = neg_bigram_dict[w1 + ' ' + w2] + 1
                except:
                    neg_bigram_dict[w1 + ' ' + w2] = 1
    df.apply(lambda row: get_bigrams(row),axis=1)
    pos_bigram_set = set(list(pos_bigram_dict.keys()))
    neg_bigram_set = set(list(neg_bigram_dict.keys()))
    tmp_neg_set = neg_bigram_set - pos_bigram_set
    pos_bigram_set = pos_bigram_set - neg_bigram_set
    neg_bigram_set = tmp_neg_set
    # del tmp_neg_set

    final_bigram_dict = {}

    for key in neg_bigram_set:
        final_bigram_dict[key] = neg_bigram_dict[key]

    bigram_df = pd.DataFrame.from_dict(final_bigram_dict, orient='index')
    bigram_df.columns = ["OCCURENCES"]
    bigram_df.sort_values(by='OCCURENCES', inplace=True)
    bigram_df = bigram_df[bigram_df.OCCURENCES > 4]
    print(bigram_df.head())
    return bigram_df



if __name__ == '__main__':
    reader = TweetReader()
    docs_df, label_df = reader.load_tweets('tweet_data/tweet_training.pickle')
    df = pd.DataFrame()
    df["TWEET"] = docs_df
    df["IS_POS"] = get_pos_neg_labels(label_df)
    common_words_df = get_common_bigrams(df)
    # labels = get_pos_neg_labels(label_df)
    common_words_df['WORD'] = common_words_df.index
    with open("dictionaries/dataset_negative_bigrams",'w') as file:
        try:
            file.write(";Auto generated by Aaron based on SEMEVAL dataset;\n\n")
            common_words_df.apply(lambda row: file.write(row['WORD'] + "\n"), axis=1)
        except:
            print("error writing file")
